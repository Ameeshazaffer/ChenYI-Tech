#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#include "animal.h"
#include "refuge.h"


int generer_id(Animal **tableau, int taille){
int id;
int existe;
do{
    id = rand() % 100 + 1;
    existe = 0;
    for(int i = 0; i < taille; i++){
        if((*(tableau + i))->num_id == id){
            existe = 1;
            break;
        }
    }
} while(existe == 1);
    return id;
}

char* type_age(int age){
if(age >= 0 && age <= 2){
    return "bebe";
}else if(age >= 3 && age <= 5){
    return "jeune";
}else if(age >= 6 && age <= 9){
    return "adulte";
}else if(age >= 10){
    return "senior";
}
    return NULL;
}



void afficher(Animal *a){
printf("____________________________________________________________\n");
printf("ID :                       %d\n", a->num_id);
printf("NOM :                      %s\n", a->nom);
printf("ESPECE :                   %s\n", a->espece);
printf("ANNEE DE NAISSANCE :       %d\n", a->naissance);
printf("AGE :                      %d\n", a->age);
printf("POIDS :                    %.2f\n", a->poids);
printf("TYPE AGE :                 %s\n", a->type_age);
printf("QUANTITES DE NOURRITURES : %.2f\n", a->quantites_nourriture);
printf("TRAVAIL JOURNALIER :       %d\n", a->travail_journalier);
printf("TRAVAIL HEBDOMADAIRE :     %d\n", a->travail_hebdomadaire);
printf("COMMENTAIRE :              %s\n", a->commentaire);
printf("____________________________________________________________\n");
}


Animal* constructeur(Animal **tableau, int taille){
Animal *a = (Animal*)malloc(sizeof(Animal));
if (a == NULL) {
    printf("Erreur d'allocation de la memoire.\n");
    exit(1);
}
a->num_id = generer_id(tableau, taille);
printf("Veuillez saisir le nom (Avec majuscule): ");
a->nom = (char*)malloc(50 * sizeof(char));
scanf("%49s", a->nom);
getchar();

printf("Veuillez saisir l'espece (Sans majuscule): ");
a->espece = (char*)malloc(50 * sizeof(char));
scanf("%49s", a->espece);
getchar();

printf("Veuillez saisir l'annee de naissance: ");
scanf("%d", &a->naissance);
getchar();

printf("Veuillez saisir le poids: ");
scanf("%f", &a->poids);
getchar();

char buffer[256];
printf("Veuillez saisir un commentaire (taper 'X' si vous ne voulez pas inclure de commentaire): ");
fgets(buffer, 256, stdin);
buffer[strcspn(buffer, "\n")] = '\0';
a->commentaire = malloc(strlen(buffer) + 1);
strcpy(a->commentaire, buffer);

a->age = 2025 - a->naissance;

a->type_age = type_age(a->age);

if (strcmp(a->espece, "chien") == 0 || strcmp(a->espece, "chat") == 0){
    if(a->age < 2){
        a->quantites_nourriture = 500;
    }else{
        a->quantites_nourriture = (a->poids * 10) / 100;
    }
}else if(strcmp(a->espece, "hamster") == 0){
        a->quantites_nourriture = 20;
}else if(strcmp(a->espece, "autruche") == 0){
        a->quantites_nourriture = 2500;
}


if (strcmp(a->espece, "chien") == 0){
    a->travail_journalier = 5;
    a->travail_hebdomadaire = 20;
}else if(strcmp(a->espece, "chat") == 0){
    a->travail_journalier = 10;
    a->travail_hebdomadaire = 20;
}else if(strcmp(a->espece, "hamster") == 0){
    a->travail_journalier = 10;
    a->travail_hebdomadaire = 20;
}else if(strcmp(a->espece, "autruche") == 0){
    a->travail_journalier = 20;
    a->travail_hebdomadaire = 45;
}
afficher(a);
    return a;
}

Animal** ajouter_Animal(Animal **tableau, int *taille, Animal *a){
if((*taille + 1) >= 50){
    printf("Il n'y a plus de place dans le refuge.\n");
}else{
    tableau = realloc(tableau, (*taille + 1) * sizeof(Animal*));
    tableau[*taille] = a;
    (*taille)++;
}
    return tableau;
}

Animal** enlever_Animal(Animal **tableau, int *taille, int id) {
int index = -1;
for(int i = 0; i < *taille; i++){
    if((*(tableau + i))->num_id == id){
        index = i;
        break;
    }
}

if(index == -1){
    printf("Cet animal n'a pas ete trouve.\n");
}else{
    printf("Informations de l'animal adopte :\n");
    afficher(*(tableau + index));
    free((*(tableau + index))->nom);
    free((*(tableau + index))->espece);
    free((*(tableau + index))->commentaire);
    free(*(tableau + index));
    for(int j = index; j < (*taille - 1); j++){
        *(tableau + j) = *(tableau + (j + 1));
    }
}

(*taille)--;
tableau = realloc(tableau, (*taille) * sizeof(Animal*));
if (*taille > 0) {
    tableau = realloc(tableau, (*taille) * sizeof(Animal*));
    if (tableau == NULL) {
        printf("Erreur d'allocation de la memoire.\n");
        exit(1);
    }
}else{
    free(tableau);
    tableau = NULL;
}
    return tableau;
}


void rechercher_Animal(Animal **tableau, int taille, char *nom, char* espece, char* type_age){
int trouve = 0;
for(int i = 0 ; i < taille ; i++){
if(strcmp(nom,"X")!=0){
    if(strcmp(espece,"X")!=0){
        if(strcmp(type_age,"X")!=0){
            if(strcmp(nom,(*(tableau + i))->nom)==0 && strcmp(espece,(*(tableau + i))->espece)==0 && strcmp(type_age,(*(tableau + i))->type_age)==0){
                afficher(*(tableau + i));
                trouve = 1;
            }
        }else{
            if(strcmp(nom,(*(tableau + i))->nom)==0 && strcmp(espece,(*(tableau + i))->espece)==0){
                afficher(*(tableau + i));
                trouve = 1;
            }
        }
    }else{
        if(strcmp(type_age,"X")!=0){
            if(strcmp(nom,(*(tableau + i))->nom)==0 && strcmp(type_age,(*(tableau + i))->type_age)==0){
                afficher(*(tableau + i));
                trouve = 1;
            }
        }
    }
}else{
    if(strcmp(espece,"X")!=0){
        if(strcmp(type_age,"X")!=0){
            if(strcmp(espece,(*(tableau + i))->espece)==0 && strcmp(type_age,(*(tableau + i))->type_age)==0){
                afficher(*(tableau + i));
                trouve = 1;

            }
        }
    }
}

}
if(trouve==0){
    printf("L'animal recherche n'a pas ete trouve.\n");
}
}


